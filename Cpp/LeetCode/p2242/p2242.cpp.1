#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    int maximumScore(vector<int>& scores, vector<vector<int>>& edges) {
        int N = scores.size();

        vector<vector<pair<int, int>>> G(N);
        vector<vector<vector<int>>> levelScore(4, vector<vector<int>>(N));

        for (vector<int> e: edges) {
            G[e[0]].push_back({e[1], G[e[1]].size()});
            G[e[1]].push_back({e[0], G[e[0]].size() - 1});
        }

        for (int i = 0; i < N; i ++) {
            for (int j = 0; j < 4; j ++)
                levelScore[j][i].resize(G[i].size());
            fill(levelScore[0][i].begin(), levelScore[0][i].end(), scores[i]);
        }

        int maxLt[N], maxRt[N];
        for (int i = 1; i < 3; i ++) {
            for (int j = 0; j < N; j ++) {
                int n = G[j].size();
                maxLt[0] = maxRt[n - 1] = -1;
                for (int k = 0; k < n; k ++) {
                    pair<int, int> eLt, eRt;
                    eLt = G[j][k - 1], eRt = G[j][k + 1];
                    if (k > 0)
                        maxLt[k] = max(maxLt[k - 1], levelScore[i - 1][eLt.first][eLt.second]);
                    if (k < n - 1)
                        maxRt[k] = max(maxRt[k + 1], levelScore[i - 1][eRt.first][eRt.second]);
                    /* cout << levelScore[i - 1][eLt.first][eLt.second] << ' '; */
                    /* cout << levelScore[i - 1][eRt.first][eRt.second] << '\n'; */
                }

                for (int k = 0; k < n; k ++) {
                    int t = max(maxLt[k], maxRt[k]);
                    if (t > -1)
                        t += scores[j];
                    /* cout << t << '\n'; */
                    levelScore[i][j][k] = t;
                }
            }
        }

        for (int i = 0; i < N; i ++) {
            printf("%d: ", i);
            for (pair<int, int> p: G[i])
                printf("%d, ", p.first);
            cout << "\n";
        }

        cout << "\n";
        for (int i = 0; i < N; i ++) {
            printf("%d: ", i);
            for (int j = 0; j < G[i].size(); j ++)
                printf("%d, ", levelScore[2][i][j]);
            cout << "\n";
        }

        int ans = -1;

        for (int i = 0; i < N; i ++) {
            int n = G[i].size();
            int t = -1;
            for (int j = 0; j < n; j ++) {
                pair<int, int> e;
                e = G[i][j];
                t = max(t, levelScore[2][e.first][e.second]);
            }

            if (t > -1)
                t += scores[i];

            ans = max(ans, t);
        }

        return ans;
    }
};

int main() {

    /* vector<int> scores {9,20,6,4,11,12}; */
    /* vector<vector<int>> edges {{0,3},{5,3},{2,4},{1,3}}; */
    vector<int> scores {5,2,9,8,4};
    vector<vector<int>> edges {{0,1},{1,2},{2,3},{0,2},{1,3},{2,4}};

    Solution solution;
    cout << solution.maximumScore(scores, edges) << endl;

    return 0;
}
